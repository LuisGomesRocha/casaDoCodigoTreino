Funcionalidade de cadastro de um novo autor no desafio da Casa do Código



Cenário:

Descreva os passos que você planeja executar para a implementação da funcionalidade. É muito importante que você descreva aqui antes da implementação em si.




O que seria bom ver nessa resposta?



Peso 2: Criação do método para receber a requisição de um novo Autor anotado com a configuração para receber um POST, configurado para validar entrada de dados e também para receber os dados como JSON.
Peso 2: Utilização de uma classe específica para receber os dados do novo Autor. O famoso DTO.
Peso 1: Utilização das annotations de validação da Bean Validation na classe do DTO
Peso 1: Criação da classe que representa o Autor com as informações
Peso 1: Utilização das annotations de validação da Bean Validation na classe do Autor
Peso 1: Utilização do construtor na classe Autor para deixar claro os dados que são obrigatórios
Peso 1: Utilização do EntityManager ou Repository específico para a inserção do Autor
Peso 1: Criação da tabela no banco de dados com as colunas necessárias




O que penaliza sua resposta?


Penalidade - 1: Criação de setters e getters na classe Autor. Não é necessário dada a especificação.
Penalidade - 1: Criação de uma classe, comumente conhecida como Service para realizar a inserção do Autor. Não é necessária dada a especificação. Não tem nada lá que sugira a necessidade da flexibilidade que essa indireção traria.
Penalidade - 1: Criação de uma classe específica de conversão entre os dados que vieram da requisição e o objeto do tipo Autor, comumente conhecida como Converter. Não é necessária porque pode ser feito direto no método do controller ou através de um método na classe que representa o DTO.
Penalidade - 1: Utilização de biblioteca de conversão tipo ModelMapper, MapStruct. Não é necessário porque entendemos que a configuração necessária e o entendimento extra necessário não compensam os possíveis benefícios.
Penalidade - 1: Utilização de biblioteca de geração de código compilado estilo Lombok. Não é necessário porque entendemos que o benefício trazido pelo código gerado não compensa o esforço de entendimento necessário que existe por trás de tal geração.



Resposta do Especialista:

Criar um controller com um método para receber o post com os dados do novo autor.
O argumento do método do controller é do tipo de uma classe no estilo DTO para receber os dados do novo autor. Ali também eu uso a anotação @Valid e @RequestBody para indicar a necessidade de validação e que o dado vem no corpo da requisição.
Na classe que tem os dados de entrada, utilizo as annotations da Bean Validation para sinalizar as validações necessárias
Dentro do método do controller eu converto os dados do DTO para a criação de um objeto do tipo Autor. Faço através de um método adicionado no DTO que retorna um Autor em função dos atributos.
Crio a classe Autor com os atributos devidamente anotados com a Bean Validation.
Também faço o mapeamento na classe Autor para que o Hibernate consiga persistir os objetos
Recebo injetado o EntityManager no controller e gravo o autor no banco de dados.
Deixo o Hibernate criar a tabela para mim no banco de dados. Poderia ter criado também o scritp e executado contra o banco



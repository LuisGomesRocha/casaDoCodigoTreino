ü§ñ Para cadastrar uma nova categoria no sistema ser√° criada a classe Categoria, anotada com @entity que informar que uma classe tamb√©m √© uma entidade, a partir disso, a JPA estabelecer√° a liga√ß√£o entre a entidade e uma tabela de mesmo nome no banco de dados, onde os dados de objetos desse tipo poder√£o ser persistidos. Os dados existentes nessa classe ser√° Id e nome. Afim de atender as restri√ß√µes ser√° utilizado as anota√ß√µes @column(unique = true), sendo esta anota√ß√£o usada para garantir um valor √∫nico criado em seu banco de dados, n√£o permitindo valores repetidos em sua coluna. ü§ñ

ü§ñ Para atender os casos em que alguma restri√ß√£o n√£o seja atendida, personalizando o JSON (informando os problemas de valida√ß√£o), ser√° criado duas classes denominadas CategoriaOuAutorNaoEncontrado e ErrosHandle, onde na primeira ser√° estendido os m√©todos da classe RuntimeException capturando a mensagem de erro, e no segundo momento nos casos de MethodArgumentNotValidException o status de retorno ser√° ‚ÄúBAD REQUEST‚Äù com uma mensagem personalizada dizendo: "Categoria ID ou Autor ID", "Id(s) n√£o encontrado!" ü§ñ

CategoriaOuAutorNaoEncontrado
public class CategoriaOuAutorNaoEncontrado extends RuntimeException{
    public CategoriaOuAutorNaoEncontrado(String message) {
        super(message);
    }
}
ErrosHandle
public class ErrosHandle {

    private MessageSource messageSource;


    public ErrosHandle(MessageSource messageSource) {
        this.messageSource = messageSource;
    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public List<ErrosResponseDto> autorValidationError(MethodArgumentNotValidException ex){

        List<ErrosResponseDto> erros = new ArrayList<>();

        List<FieldError> errorList = ex.getBindingResult().getFieldErrors();

        errorList.forEach(e->{
                    String message = messageSource.getMessage(e,LocaleContextHolder.getLocale());
                    erros.add(new ErrosResponseDto(e.getField(),message));
                });

        return erros;

    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(CategoriaOuAutorNaoEncontrado.class)
    public ErrosResponseDto CategoriaOuAutorNaoEncontrado(CategoriaOuAutorNaoEncontrado ex){

        ErrosResponseDto erro;
        erro = new ErrosResponseDto("Categoria ID ou Autor ID", "Id(s) n√£o encontrado!");
        return erro;

    }

}
ü§ñ Para cadastrar um novo livro no sistema ser√° criado a classe Lutor, anotado com @entity que informar que uma classe tamb√©m √© uma entidade, a partir disso, a JPA estabelecer√° a liga√ß√£o entre a entidade e uma tabela de mesmo nome no banco de dados, onde os dados de objetos desse tipo poder√£o ser persistidos. Os dados existentes nessa classe ser√° Id, titulo, subTitulo, resumo, sumario, preco, paginas, isbn e dataPublicacao. A classe livro ter√° um modelo relacional (uma associa√ß√£o muitos-para-um (N:1) √© quando temos v√°rias tuplas de uma tabela referenciando uma tupla de uma tabela qualquer), @manytoone com as classes Categoria e Autor.ü§ñ

ü§ñ Teremos tamb√©m a interface LivroRepository que vai receber os m√©todos da classe JpaRepository, bem como a classe LivroController que vai ter os m√©todos de salvar elistar os livros cadastrados. Por fim na classe LivroRequest e LivroResponse, ir√° ocorrer a convers√£o do objeto relacionando com classe Autor e Categoria, bem como limitando as informa√ß√µes e retorno ap√≥s a requisi√ß√£o do "endpoint" dos dados cadastrados. ü§ñ

Livro

@Entity
public class Livro {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Column(nullable = false, unique = true)
    private String titulo;
    @Column(nullable = false)
    private String subTitulo;
    @Column(nullable = false, length = 500)
    private String resumo;
    @Column(columnDefinition = "text null")
    private String sumario;
    @Column(nullable = false)
    private BigDecimal preco;
    @Column(nullable = false)
    private Integer paginas;
    @Column(nullable = false, unique = true)
    private String isbn;
    private LocalDate dataPublicacao;
    @ManyToOne
    private Categoria categoria;
    @ManyToOne
    private Autor autor;

LivroRequest

public class LivroRequest {

    @NotBlank
    @VerificaCampoDuplicado(attribute = "titulo", clazz = Livro.class)
    private String titulo;

    @NotBlank
    private String subTitulo;

    @NotBlank @Size(max = 500)
    private String resumo;

    private String sumario;

    @DecimalMin("20.0")
    private BigDecimal preco;

    @Min(100)
    private Integer nPaginas;

    @NotBlank
    @VerificaCampoDuplicado(attribute = "isbn",clazz = Livro.class)
    private String isbn;

    @Future @JsonFormat(pattern = "dd/MM/yyyy", shape = JsonFormat.Shape.STRING)
    private LocalDate dataPublicacao;

    @Valid
    @NotNull //Classe Categoria
    @ConvertGroup(from = Default.class, to = Groups.Categoria.class)
    private Categoria categoria;

    @Valid
    @NotNull
    @ConvertGroup(from = Default.class, to = Groups.Autor.class)
    private Autor autor;

                              .
                              .
                              .

    public Livro toLivro(Categoria categoria, Autor autor){

        return new Livro(this.titulo,this.subTitulo, this.resumo,this.sumario,this.preco,this.nPaginas,
                    this.isbn,this.dataPublicacao,categoria,autor);

    }
}
LivroController

@RestController
@RequestMapping("/livros")
public class LivroController {

    private LivroRepository repository;
    private CategoriaRepository categoriaRepository;
    private AutorRepository autorRepository;

    public LivroController(LivroRepository repository,
                           CategoriaRepository categoriaRepository,
                           AutorRepository autorRepository) {

        this.repository = repository;
        this.categoriaRepository = categoriaRepository;
        this.autorRepository = autorRepository;

    }

    @PostMapping
    public ResponseEntity<?> salvarLivro(@RequestBody @Valid LivroRequest livroRequest)  {

        //verificar a categoria
        Optional<Categoria> categoria = categoriaRepository.findById(livroRequest.getCategoria().getId());
        Optional<Autor> autor = autorRepository.findById(livroRequest.getAutor().getId());
        if(categoria.isPresent() && autor.isPresent()){
            return ResponseEntity.ok(repository.save(livroRequest.toLivro(categoria.get(),autor.get())));
        }

        throw new CategoriaOuAutorNaoEncontrado("Id da Categoria ou do Autor nao encontrado!");

    }

    @GetMapping
    public List<LivroResponse> listarTodos(){
        LivroResponse livroResponse = new LivroResponse();
        return livroResponse.toLivroResponse(repository.findAll());
    }

}
LivroRepository
public interface LivroRepository extends JpaRepository<Livro, Long> {
}

LivroResponse
public class LivroResponse {
    private Long id;
    private String nome;

    public LivroResponse() {
    }

    public LivroResponse(Long id, String nome) {
        this.id = id;
        this.nome = nome;
    }


    public Long getId() {
        return id;
    }

    public String getNome() {
        return nome;
    }

    public List<LivroResponse> toLivroResponse(List<Livro> livros) {

        List<LivroResponse> livroResponses = livros.stream()
                .map(e->new LivroResponse(e.getId(),e.getTitulo()))
                .collect(Collectors.toList());
        return livroResponses;

    }
}
